// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            String    @id @default(uuid()) @db.Uuid
  // image_id     String?      @db.Uuid
  first_name    String    @db.VarChar(255)
  last_name     String?   @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  password      String    @db.Text
  institute_id  String?   @db.VarChar(255)
  access_token  String?   @db.Text
  deletedAt     DateTime? @db.Timestamp()
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  otp           String?   @db.VarChar(10)
  otp_expire_at DateTime? @db.Date
  chats         chats[]
  // media_file   media_files? @relation(fields: [image_id], references: [id])
}

model chats {
  id        String          @id @default(uuid()) @db.Uuid
  user_id   String          @db.Uuid
  deletedAt DateTime?       @db.Timestamp()
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      users           @relation(fields: [user_id], references: [id])
  messages  chat_messages[]
}

model chat_messages {
  id        String    @id @default(uuid()) @db.Uuid
  chat_id   String    @db.Uuid
  sender_id String?   @db.VarChar(255)
  message   String    @db.Text
  deletedAt DateTime? @db.Timestamp()
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  chats     chats?    @relation(fields: [chat_id], references: [id])
}

// model media_files {
//   id        String    @id @default(uuid()) @db.Uuid
//   file      String    @db.VarChar(255)
//   deletedAt DateTime? @db.Timestamp()
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   users     users[]
// }
